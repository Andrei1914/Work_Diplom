from config import *
from text import *
from interaction import *
from aiogram import executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import *
import asyncio
from table import *
from datetime import date

class RegistrationState(StatesGroup):#–ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name: str = State()
    surname: str = State()
    phone_number: str = State()
    password: str = State()

class Help(StatesGroup):#–ø–æ–ª—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    help_message = State()


#—Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler(commands=['start'])
async def hello_func(message):
    if await get_user(message.from_user.id):
        await message.reply(f"üå∏{message.from_user.username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å "+ hello_text, reply_markup=start_button)
    else:
        await message.reply(f"{message.from_user.username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, –Ω–æ —á—Ç–æ –±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏, –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ÉüëÄ", reply_markup = log)
     


@dp.message_handler(text ="üìÖ–ó–∞–ø–∏—Å—åüìÖ")
async def services_func(message):
    await message.answer('üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —É—Å–ª—É–≥–∏:üëá', reply_markup=services)
 
@dp.message_handler(text="üìù–û—Ç–∑—ã–≤—ãüìù")
async def services_func(message):
    description = (
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –∏ —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üåü\n\n"
        "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ. "
        "–ö–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–ª–æ–≤–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!"
    )
    await message.answer(description, reply_markup=feedback)
 


#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_name_func(call):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.name.set()

@dp.message_handler(state=RegistrationState.name)
async def register_surname_func(message, state):
    await state.update_data(name = message.text) 
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:")
    await RegistrationState.surname.set()

@dp.message_handler(state=RegistrationState.surname)
async def register_phone_number_func(message, state):
    await state.update_data(surname = message.text)    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä(–î–ª—è —Å–≤—è–∑–∏ —Å –º–∞—Å—Ç–µ—Ä–æ–º):")
    await RegistrationState.phone_number.set()   

@dp.message_handler(state=RegistrationState.phone_number)
async def register_password_func(message, state):
    await state.update_data(phone_number = message.text)    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
    await RegistrationState.password.set()   

@dp.message_handler(state=RegistrationState.password)
async def full_register_func(message, state):
    await state.update_data(password = message.text)   
    data = await state.get_data()
    if await add_user(message.from_user.id, data['name'], data['surname'], data['phone_number'], data['password']):   
        await message.answer("‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!‚úÖ", reply_markup=start_button)   
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", reply_markup=start_button)

    await state.finish() 





#–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
@dp.callback_query_handler(text="help")
async def help_func(call):
    await call.message.answer("üòä–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∞ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –º–∞—Å—Ç–µ—Ä—Éüòä")
    await Help.help_message.set()

@dp.message_handler(state=Help.help_message)
async def message_help_db(message, state): 
    await state.update_data(help_message = message.text) 
    now = date.today()
    data = await state.get_data()
    user_id = message.from_user.id
    if await add_message(user_id, data['help_message'], now):
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–æ–ø—Ä–æ—Å, –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üôè‚ù§Ô∏èüìû ")
    else:
        await message.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! ")

    await state.finish() 






service_num = {}

# –ú–∞–Ω–∏–∫—é—Ä
@dp.callback_query_handler(text="manicure")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø —É—Å–ª—É–≥–∏ :", reply_markup=extended_services_manicure)


@dp.callback_query_handler(text="build_up")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'

@dp.callback_query_handler(text="one_nail")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–î–∏–∑–∞–π–Ω –æ–¥–Ω–æ–≥–æ –Ω–æ–≥—Ç—è'

@dp.callback_query_handler(text="build_up_nail")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π'

@dp.callback_query_handler(text="Manicure_gel_polish")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ú–∞–Ω–∏–∫—é—Ä+–≥–µ–ª—å –ª–∞–∫'

@dp.callback_query_handler(text="Full_pedicure")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ü–æ–ª–Ω—ã–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º'







# –†–µ—Å–Ω–∏—Ü—ã
@dp.callback_query_handler(text="eyelashes")
async def eyelashes_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø —É—Å–ª—É–≥–∏ :", reply_markup=extended_services_eyelashes)

@dp.callback_query_handler(text="eyebrow_coloring")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π'

@dp.callback_query_handler(text="eyebrow_correction")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ö–æ—Ä—Ä–µ–∫—Ü–∏—é –±—Ä–æ–≤–µ–π'

@dp.callback_query_handler(text="eyebrow_architecture")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±—Ä–æ–≤–µ–π'

@dp.callback_query_handler(text="eyelash_extensions")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü'






# –ú–∞–∫–∏—è–∂
@dp.callback_query_handler(text="makeup")
async def makeup_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø —É—Å–ª—É–≥–∏ :", reply_markup=extended_services_eyelashes)


@dp.callback_query_handler(text="makeup_and_grim")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ú–∞–∫–∏—è–∂ –∏ –≥—Ä–∏–º'

@dp.callback_query_handler(text="face_contouring")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ö–æ–Ω—Ç—É—Ä–∏–Ω–≥ –ª–∏—Ü–∞'

@dp.callback_query_handler(text="temporary_tattoos")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞—Ç—É'








# –ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞
@dp.callback_query_handler(text="cleaning")
async def cleaning_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø —É—Å–ª—É–≥–∏ :", reply_markup=extended_services_cleaning)

@dp.callback_query_handler(text="mechanical_cleaning")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫—É—é —á–∏—Å—Ç–∫—É'

@dp.callback_query_handler(text="ultrasonic_cleaning")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—É—é —á–∏—Å—Ç–∫—É'

@dp.callback_query_handler(text="vacuum_cleaning")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–í–∞–∫—É—É–º–Ω–Ω—É—é —á–∏—Å—Ç–∫—É –ª–∏—Ü–∞'

@dp.callback_query_handler(text="laser_cleaning")
async def manicure_func(call):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—Éüìù :", reply_markup=create_date_keyboard())
    service_num[call.from_user.id] = '–õ–∞–∑–µ—Ä–Ω—É—é —á–∏—Å—Ç–∫—É'






#–∑–∞–ø–∏—Å—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
@dp.callback_query_handler(lambda c: True)
async def process_cleaning_date(callback_query: types.CallbackQuery):
    date = callback_query.data
    user_id = callback_query.from_user.id 
    service_name = service_num.get(user_id)
    if await add_service_to_user(user_id, service_name, date):
        await callback_query.message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {service_name}, –Ω–∞ {date}, –∂–¥–µ–º –≤–∞—Å!üî•‚ù§Ô∏è", reply_markup=start_button)
    else:
        await callback_query.message.answer(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {service_name}, –Ω–∞ {date}, —Ç–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –±–æ–ª—å—à–µ 5 –∏–ª–∏ –∂–µ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É((", reply_markup=start_button)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
    asyncio.run(connection_db())